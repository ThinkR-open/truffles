[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement murielle@thinkr.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Golem User Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/dev_truffles.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"","text":"Cette documentation vise à fournir des instructions détaillées pour les développeurs travaillant sur cette application utilisant {golem} et implémentant des fonctionnalités métier. L’application utilise également les bibliothèques JavaScript Leaflet, SweetAlert2 et Chart.js.","code":""},{"path":"/articles/dev_truffles.html","id":"architecture-de-lapplication","dir":"Articles","previous_headings":"","what":"Architecture de l’application","title":"","text":"L’application Shiny suit une architecture basée sur {golem}. Voici la structure de base de l’application : Avec entre autre:","code":". ├── app.R ├── CODE_OF_CONDUCT.md ├── data-raw ├── DESCRIPTION ├── dev ├── dev ├── docs ├── inst ├── LICENSE ├── LICENSE.md ├── man ├── manifest.json ├── NAMESPACE ├── NEWS.md ├── R ├── README.md ├── README.Rmd ├── tests ├── truffles.Rproj ├── vignettes └── _pkgdown.yml DESCRIPTION: Fichier de description du package. R/: Contient les scripts pour le serveur (app_server.R) et l'interface utilisateur (app_ui.R). data-raw/: Répertoire pour stocker les données utilisées pour construire la base sql qui sert d'exemple. inst/app/: Répertoire pour les ressources web statiques utilisées par l'application. man/: Documentation pour les fonctions. tests/: Tests unitaires pour l'application."},{"path":"/articles/dev_truffles.html","id":"utilisation-des-bibliothèques-javascript","dir":"Articles","previous_headings":"","what":"Utilisation des Bibliothèques JavaScript","title":"","text":"","code":"inst/app/www ├── chart.js ├── chart.umd.min.js ├── chartjs_.js ├── custom.css ├── favicon.ico ├── leaflet.css ├── leaflet.js ├── leaflet_.js ├── sweetalert2.all.min.js ├── sweetalert2.min.css ├── sweetalert2_.js ├── template_add_reens.html ├── template_find_truffle.html └── template_identity_card.html"},{"path":"/articles/dev_truffles.html","id":"leaflet","dir":"Articles","previous_headings":"Utilisation des Bibliothèques JavaScript","what":"Leaflet","title":"","text":"Leaflet est une bibliothèque JavaScript de cartographie interactive. Elle est utilisée pour la génération de la carte cliquable de la plantation de chênes truffiers.","code":""},{"path":"/articles/dev_truffles.html","id":"sweetalert2","dir":"Articles","previous_headings":"Utilisation des Bibliothèques JavaScript","what":"SweetAlert2","title":"","text":"SweetAlert2 est une bibliothèque JavaScript permettant d’afficher des alertes personnalisées. Elle est notamment utilisée pour les intéractions avec l’utilisateur via des modals. Il est important de noter que l’utilisation de SweetAlert2 dans cette application repose également sur des templates HTML pour construire les modales:","code":"├── template_add_reens.html ├── template_find_truffle.html └── template_identity_card.html"},{"path":"/articles/dev_truffles.html","id":"chart-js","dir":"Articles","previous_headings":"Utilisation des Bibliothèques JavaScript","what":"Chart.js","title":"","text":"Chart.js est une bibliothèque JavaScript permettant de créer des graphiques interactifs. Elle est utilisée dans l’onglet “dataviz”.","code":""},{"path":[]},{"path":[]},{"path":"/articles/dev_truffles.html","id":"variables-denvironnement-pour-la-connexion-à-la-base-de-données","dir":"Articles","previous_headings":"","what":"Variables d’environnement pour la connexion à la base de données","title":"","text":"La fonction connect_db() utilise des variables d’environnement pour sécuriser les informations de connexion à la base de données. Afin de garantir une connexion réussie, les variables suivantes doivent être définies avant d’exécuter la fonction : DB_HOST : Adresse du serveur de la base de données (ex. “localhost” ou une adresse IP). DB_USER : Identifiant de l’utilisateur ayant accès à la base. DB_PWD : Mot de passe associé à l’utilisateur. Ces variables sont récupérées dans le code via Sys.getenv(), permettant de ne pas stocker directement les identifiants sensibles dans le code source. Si ces variables ne sont pas définies, la connexion échouera.","code":""},{"path":"/articles/dev_truffles.html","id":"configuration-des-variables-denvironnement","dir":"Articles","previous_headings":"Variables d’environnement pour la connexion à la base de données","what":"Configuration des variables d’environnement","title":"","text":"Avant d’utiliser connect_db(), assurez-vous que ces variables sont bien définies dans votre environnement d’exécution. Dans le fichier .Renviron :","code":"DB_HOST = mon_serveur DB_USER = mon_utilisateur DB_PWD = mon_mot_de_passe"},{"path":"/articles/truffles.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Utilisation des fonctions métier","text":"Le package {truffles} fournit des fonctionnalités pour gérer les données relatives aux truffes trouvées sous les chênes. Cette vignette détaille les étapes de base pour utiliser le package.","code":""},{"path":"/articles/truffles.html","id":"connexion-à-une-base-de-données","dir":"Articles","previous_headings":"","what":"Connexion à une base de données","title":"Utilisation des fonctions métier","text":"La première étape consiste à se connecter à une base de données contenant les informations sur les chênes, les truffes et les resemis.","code":""},{"path":"/articles/truffles.html","id":"préparation-de-la-base-de-données-pour-les-tests","dir":"Articles","previous_headings":"Connexion à une base de données","what":"Préparation de la base de données pour les tests","title":"Utilisation des fonctions métier","text":"Nous créons une base de données temporaire pour effectuer nos tests sans altérer les données originales.","code":""},{"path":"/articles/truffles.html","id":"création-des-tables","dir":"Articles","previous_headings":"Connexion à une base de données > Préparation de la base de données pour les tests","what":"Création des tables","title":"Utilisation des fonctions métier","text":"","code":"conn_usage <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")  # Création de la table truffe dans la base de données DBI::dbWriteTable(   conn_usage,   \"truffe\",   data.frame(     idtruffle = character(),     idoak = character(),     date_found = numeric(),     weight = numeric(),     estimation = logical(),     comment = character()   ) )  DBI::dbWriteTable(   conn_usage,   \"chenes\",   data.frame(     idoak = character(),     lon = numeric(),     lat = numeric(),     type = character(),     present = numeric(),     planting_date = numeric(),     reensemence = numeric()   ) )  DBI::dbWriteTable(   conn_usage,   \"reens\",   data.frame(     idoak = character(),     date_reens = numeric()   ) ) chenes_ <- structure(   list(     idoak = c(\"1\", \"2\", \"3\", \"4\", \"5\"),     lon = c(1.53193333748493, 1.53198654139325, 1.53203490858186, 1.53208085741133, 1.53213164296051),     lat = c(47.9984324222873, 47.9984696419663, 47.9985181893329, 47.99855540895, 47.998600719752),     type = c(\"Normal\", \"Normal\", \"Normal\", \"Normal\", \"Green\"),     present = c(1L, 1L, 1L, 1L, 1L),     planting_date = c(\"2024-01-15\", \"2023-12-20\", \"2023-11-05\", \"2024-02-10\", \"2023-10-25\")   ),   row.names = c(NA, -5L),   class = c(\"tbl_df\", \"tbl\", \"data.frame\") )   DBI::dbWriteTable(   conn_usage,   \"chenes\",   chenes_,   overwrite = TRUE )   reens_ <- structure(   list(     idoak = c(\"5\", \"5\", \"1\"),     date_reens = c(19128, 19043, 19605)   ),   row.names = c(     NA,     3L   ),   class = \"data.frame\" )  DBI::dbWriteTable(   conn_usage,   \"reens\",   reens_,   overwrite = TRUE )"},{"path":"/articles/truffles.html","id":"chargement-des-données","dir":"Articles","previous_headings":"Connexion à une base de données","what":"Chargement des données","title":"Utilisation des fonctions métier","text":"Nous chargeons les données à partir de la base de données. Nous supposons que les tables de la base de données contiennent les informations suivantes : chenes : données sur les chênes truffe : données sur les truffes trouvées reens : données sur les resemis","code":"chenes <- dbReadTable(conn_usage, name = \"chenes\") truffe <- dbReadTable(conn_usage, name = \"truffe\") reens <- dbReadTable(conn_usage, name = \"reens\")"},{"path":"/articles/truffles.html","id":"filtrage-des-chênes-présents","dir":"Articles","previous_headings":"","what":"Filtrage des chênes présents","title":"Utilisation des fonctions métier","text":"Nous filtrons les chênes présents dans la base de données.","code":"chenes <- chenes |>   dplyr::filter(present == 1)"},{"path":"/articles/truffles.html","id":"ajout-dune-nouvelle-truffe-avec-toutes-les-informations","dir":"Articles","previous_headings":"","what":"Ajout d’une nouvelle truffe avec toutes les informations","title":"Utilisation des fonctions métier","text":"Nous ajoutons une nouvelle truffe avec toutes les informations requises.","code":""},{"path":"/articles/truffles.html","id":"ajout-de-la-nouvelle-truffe","dir":"Articles","previous_headings":"Ajout d’une nouvelle truffe avec toutes les informations","what":"Ajout de la nouvelle truffe","title":"Utilisation des fonctions métier","text":"","code":"write_db_new_truffe(   conn = conn_usage,   theidoak = \"5\",   date_found = \"2024-01-01\",   weight = 25,   estimation = 0,   comment = \"Un commentaire\" ) #> WRITING in DB truffe"},{"path":"/articles/truffles.html","id":"ajout-dune-nouvelle-truffe-sans-weight","dir":"Articles","previous_headings":"Ajout d’une nouvelle truffe avec toutes les informations","what":"Ajout d’une nouvelle truffe sans weight","title":"Utilisation des fonctions métier","text":"Nous ajoutons une nouvelle truffe sans spécifier le weight.","code":"write_db_new_truffe(   conn = conn_usage,   theidoak = \"1\",   date_found = \"2024-01-01\",   weight = NA,   estimation = 1,   comment = \"weight a completer plus tard\" ) #> WRITING in DB truffe"},{"path":"/articles/truffles.html","id":"ajout-dune-nouvelle-truffe-avec-estimation-du-weight","dir":"Articles","previous_headings":"Ajout d’une nouvelle truffe avec toutes les informations","what":"Ajout d’une nouvelle truffe avec estimation du weight","title":"Utilisation des fonctions métier","text":"Nous ajoutons une nouvelle truffe en estimant son weight.","code":"write_db_new_truffe(   conn = conn_usage,   theidoak = \"3\",   date_found = \"2024-02-01\",   weight = 100,   estimation = 1,   comment = \"Un weight estime\" ) #> WRITING in DB truffe"},{"path":"/articles/truffles.html","id":"vérification-des-résultats","dir":"Articles","previous_headings":"Ajout d’une nouvelle truffe avec toutes les informations","what":"Vérification des résultats","title":"Utilisation des fonctions métier","text":"Nous vérifions le nombre total de truffes ajoutées.","code":"truffe <- dbReadTable(conn_usage, name = \"truffe\") truffe #>                          idtruffle idoak date_found weight estimation #> 1 df6cdb84cd2d209c7155d2ccc83b5b9b     5 2024-01-01     25          0 #> 2 694b520f944e430670f9d628a45f0afe     1 2024-01-01     NA          1 #> 3 22cd6fc2c5cc7e704503e6399851f460     3 2024-02-01    100          1 #>                           comment #> 1               Un commentaire :  #> 2 weight a completer plus tard :  #> 3             Un weight estime :"},{"path":"/articles/truffles.html","id":"complétion-dinformations","dir":"Articles","previous_headings":"","what":"Complétion d’informations","title":"Utilisation des fonctions métier","text":"","code":"info <- get_info_chene_last_truffe(dbtruffe = truffe, theidoak = \"3\") update_db_truffe(   conn_usage,   idtruffle = info$idtruffle,   idoak = info$idoak,   date_found = info$date_found,   weight = 32,   comment = \"J'avais surestimé\",   estimation = 0 ) #> UPDATE db truffe"},{"path":"/articles/truffles.html","id":"récupération-des-informations","dir":"Articles","previous_headings":"","what":"Récupération des informations","title":"Utilisation des fonctions métier","text":"Nous récupèrons les informations du chêne truffier n°5 : La dernière truffe trouvée pour le chêne n°5","code":"truffe <- dbReadTable(conn_usage, name = \"truffe\") get_info(   dbchene = chenes,   dbtruffe = truffe,   dbreensemence = reens,   theidoak = \"3\" ) #> $chene #> $chene$type #> [1] \"Normal\" #>  #> $chene$planting_date #> [1] \"2023-11-05\" #>  #>  #> $truffes #> $truffes$weight_tot #> [1] 32 #>  #> $truffes$derniere_truffe #> [1] \"2024-02-01\" #>  #> $truffes$comments #> [1] \"2024-02-01 : J'avais surestimé : \" #>  #>  #> $reensemence #> [1] \"-\" get_info_chene_last_truffe(dbtruffe = truffe, theidoak = \"5\") #>                          idtruffle idoak date_found weight estimation #> 1 df6cdb84cd2d209c7155d2ccc83b5b9b     5 2024-01-01     25          0 #>             comment estim_js #> 1 Un commentaire :"},{"path":[]},{"path":"/articles/truffles.html","id":"weight-total-de-truffes-trouvés","dir":"Articles","previous_headings":"Calcul d’aggrégation:","what":"weight total de truffes trouvés","title":"Utilisation des fonctions métier","text":"","code":"weight_truffles_by(truffe) #> # A tibble: 1 × 1 #>   weight #>    <dbl> #> 1     57"},{"path":"/articles/truffles.html","id":"weight-total-de-truffes-trouvés-par-annee","dir":"Articles","previous_headings":"Calcul d’aggrégation:","what":"weight total de truffes trouvés par annee","title":"Utilisation des fonctions métier","text":"","code":"weight_truffles_by(truffe, annee = year(as.Date(date_found))) #> # A tibble: 1 × 2 #>   annee weight #>   <dbl>  <dbl> #> 1  2024     57"},{"path":"/articles/truffles.html","id":"weight-total-de-truffes-trouvés-par-annee-et-par-type","dir":"Articles","previous_headings":"Calcul d’aggrégation:","what":"weight total de truffes trouvés par annee et par type","title":"Utilisation des fonctions métier","text":"","code":"truffes_chene <- truffe |>   dplyr::inner_join(chenes, by = \"idoak\") weight_truffles_by(truffes_chene, annee = lubridate::year(as.Date(date_found)), type) #> # A tibble: 2 × 3 #>   annee type   weight #>   <dbl> <chr>   <dbl> #> 1  2024 Green      25 #> 2  2024 Normal     32"},{"path":"/articles/truffles.html","id":"déconnexion-de-la-base-de-données","dir":"Articles","previous_headings":"","what":"Déconnexion de la base de données","title":"Utilisation des fonctions métier","text":"","code":"DBI::dbDisconnect(conn_usage)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Murielle Delmotte. Maintainer, author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delmotte M (2025). truffles: Truffles. R package version 0.0.2.9000.","code":"@Manual{,   title = {truffles: Truffles},   author = {Murielle Delmotte},   year = {2025},   note = {R package version 0.0.2.9000}, }"},{"path":"/index.html","id":"truffles-","dir":"","previous_headings":"","what":"Truffles","title":"Truffles","text":"R package mapping managing truffle tree plantation truffles R package designed facilitate visualization management truffle tree plantation via mobile application. truffles, users can efficiently map truffle tree plantation, visualize cartographically interactively manage truffle data.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Truffles","text":"Cartographic Visualization: enables users visualize truffle trees cartographic interface, providing overview plantation layout. Interactive Information Display: truffle tree clickable, allowing users access detailed information planting date total weight truffles found. Truffle Declaration Recording: Users can declare record newly found truffles directly within application. specifying weight truffle, users can maintain accurate records truffle yields. Yield Analysis: truffles includes dedicated tab yield analysis, allowing users generate graphical representations truffle yields different years. feature aids trend analysis decision-making orchard management.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Truffles","text":"install truffles, can use following command R environment:","code":"# install.packages(\"remotes\") remotes::install_github(\"Thinkr-open/truffles\") # Stable development version # remotes::install_github(\"Thinkr-open/truffles@dev\") # Bleeding edge development version"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Truffles","text":"installation, can load truffles package R launch mobile application using following commands:","code":"library(truffles) run_app()"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"developper","dir":"","previous_headings":"","what":"Developper","title":"Truffles","text":"developer documentation available pkgdown: https://thinkr-open.github.io/truffles/","code":""},{"path":"/reference/connect_db.html","id":null,"dir":"Reference","previous_headings":"","what":"connect_db — connect_db","title":"connect_db — connect_db","text":"connect database","code":""},{"path":"/reference/connect_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"connect_db — connect_db","text":"","code":"connect_db(   dbname = \"postgres\",   host = Sys.getenv(\"DB_HOST\", unset = \"\"),   port = 6543,   user = Sys.getenv(\"DB_USER\", unset = \"\"),   password = Sys.getenv(\"DB_PWD\", unset = \"\") )"},{"path":"/reference/connect_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"connect_db — connect_db","text":"dbname name db host host db port port db user user db password password db","code":""},{"path":"/reference/connect_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"connect_db — connect_db","text":"","code":"if (interactive()) {   connect_db() }"},{"path":"/reference/get_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about oak and truffles — get_info","title":"Get information about oak and truffles — get_info","text":"function retrieves information oak trees truffles based provided databases oak tree ID.","code":""},{"path":"/reference/get_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about oak and truffles — get_info","text":"","code":"get_info(dbchene, dbtruffe, dbreensemence, theidoak)"},{"path":"/reference/get_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about oak and truffles — get_info","text":"dbchene Database containing information oak trees. dbtruffe Database containing information truffles. dbreensemence Database containing reseeding information. theidoak ID oak tree information retrieved.","code":""},{"path":"/reference/get_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about oak and truffles — get_info","text":"list containing information oak trees truffles.","code":""},{"path":"/reference/get_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about oak and truffles — get_info","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite(), system.file(\"chenes_truffe.sqlite\", package = \"truffles\")) chene <- DBI::dbReadTable(conn, name = \"chenes\") truffe <- DBI::dbReadTable(conn, name = \"truffe\") reensemence <- DBI::dbReadTable(conn, name = \"reens\")  get_info(dbchene = chene, dbtruffe = truffe, dbreensemence = reensemence, theidoak = \"162\") #> $chene #> $chene$type #> character(0) #>  #> $chene$planting_date #> Date of length 0 #>  #>  #> $truffes #> $truffes$weight_tot #> [1] 0 #>  #> $truffes$derniere_truffe #> [1] \"-\" #>  #> $truffes$comments #> [1] \"-\" #>  #>  #> $reensemence #> [1] \"-\" #>  DBI::dbDisconnect(conn)"},{"path":"/reference/get_info_chene.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about an oak tree — get_info_chene","title":"Get information about an oak tree — get_info_chene","text":"function retrieves information specific oak tree based ID provided oak tree database.","code":""},{"path":"/reference/get_info_chene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about an oak tree — get_info_chene","text":"","code":"get_info_chene(dbchene, theidoak)"},{"path":"/reference/get_info_chene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about an oak tree — get_info_chene","text":"dbchene Database containing information oak trees. theidoak ID oak tree information retrieved.","code":""},{"path":"/reference/get_info_chene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about an oak tree — get_info_chene","text":"list containing information oak tree, including type date plantation. list","code":""},{"path":"/reference/get_info_chene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about an oak tree — get_info_chene","text":"","code":"conn <- DBI::dbConnect(    RSQLite::SQLite(),    system.file(dbname = \"chenes_truffe.sqlite\", package = \"truffles\")  ) chene <- DBI::dbReadTable(conn, name = \"chenes\")  get_info_chene(dbchene = chene, theidoak = \"162\") #> $type #> character(0) #>  #> $planting_date #> Date of length 0 #>"},{"path":"/reference/get_info_chene_last_truffe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","title":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","text":"function retrieves information last truffle found specific oak tree.","code":""},{"path":"/reference/get_info_chene_last_truffe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","text":"","code":"get_info_chene_last_truffe(dbtruffe, theidoak, filter_missing_info = FALSE)"},{"path":"/reference/get_info_chene_last_truffe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","text":"dbtruffe data frame containing information truffles. theidoak ID oak tree. filter_missing_info logical filter truffle missing data","code":""},{"path":"/reference/get_info_chene_last_truffe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","text":"data frame containing information last truffle found specified oak tree.","code":""},{"path":"/reference/get_info_chene_last_truffe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Information about the Last Truffle Found on a Specific Oak Tree — get_info_chene_last_truffe","text":"","code":"dbtruffe <- data.frame(   idoak = c(\"123\", \"123\", \"456\", \"789\"),   estimation = c(1, 0, 1, 0),   weight = c(NA, 5, 10, 100),   date_found = as.Date(c(\"2023-01-01\", \"2023-03-15\", \"2023-02-01\", \"2022-12-01\")) )  get_info_chene_last_truffe(dbtruffe = dbtruffe, theidoak = \"123\") #>   idoak estimation weight date_found estim_js #> 1   123          0      5 2023-03-15          get_info_chene_last_truffe(dbtruffe = dbtruffe, theidoak = \"123\", filter_missing_info = TRUE) #>   idoak estimation weight date_found            estim_js #> 1   123          1     NA 2023-01-01 checked = 'checked'"},{"path":"/reference/get_info_chene_truffe.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about truffles associated with an oak tree — get_info_chene_truffe","title":"Get information about truffles associated with an oak tree — get_info_chene_truffe","text":"function retrieves information truffles associated specific oak tree based oak tree's ID provided truffle database.","code":""},{"path":"/reference/get_info_chene_truffe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about truffles associated with an oak tree — get_info_chene_truffe","text":"","code":"get_info_chene_truffe(dbtruffe, theidoak)"},{"path":"/reference/get_info_chene_truffe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about truffles associated with an oak tree — get_info_chene_truffe","text":"dbtruffe Database containing information truffles. theidoak ID oak tree information associated truffles retrieved.","code":""},{"path":"/reference/get_info_chene_truffe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about truffles associated with an oak tree — get_info_chene_truffe","text":"list containing information truffles associated oak tree, including total weight, date last truffle found, comments.","code":""},{"path":"/reference/get_info_chene_truffe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about truffles associated with an oak tree — get_info_chene_truffe","text":"","code":"conn <- DBI::dbConnect(    RSQLite::SQLite(),    system.file(dbname = \"chenes_truffe.sqlite\", package = \"truffles\")  ) truffe <- DBI::dbReadTable(conn, name = \"truffe\")  get_info_chene_truffe(dbtruffe = truffe, theidoak = \"119\") #> $weight_tot #> [1] 0 #>  #> $derniere_truffe #> [1] \"-\" #>  #> $comments #> [1] \"-\" #>  DBI::dbDisconnect(conn)"},{"path":"/reference/get_info_reensemence.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","title":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","text":"function retrieves latest reseeding date specified oak tree ID dataframe containing reseeding information.","code":""},{"path":"/reference/get_info_reensemence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","text":"","code":"get_info_reensemence(dbreensemence, theidoak)"},{"path":"/reference/get_info_reensemence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","text":"dbreensemence data frame containing reseeding information columns \"idoak\" \"date_reens\". theidoak ID oak tree retrieve reseeding date.","code":""},{"path":"/reference/get_info_reensemence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","text":"Returns latest reseeding date specified oak tree ID. reseeding information available given ID, returns \"-\".","code":""},{"path":"/reference/get_info_reensemence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the latest reseeding date for a given oak tree ID. — get_info_reensemence","text":"","code":"conn <- DBI::dbConnect(    RSQLite::SQLite(),    system.file(dbname = \"chenes_truffe.sqlite\", package = \"truffles\")  ) reensemence <- DBI::dbReadTable(conn, name = \"reens\")  get_info_reensemence(dbreensemence = reensemence, theidoak = \"150\") #> [1] \"-\" DBI::dbDisconnect(conn)"},{"path":"/reference/prepare_leaflet.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Leaflet Data — prepare_leaflet","title":"Prepare Leaflet Data — prepare_leaflet","text":"function prepares data Leaflet JavaScript visualization.","code":""},{"path":"/reference/prepare_leaflet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Leaflet Data — prepare_leaflet","text":"","code":"prepare_leaflet(dbchene, dbtruffe, dbreens)"},{"path":"/reference/prepare_leaflet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Leaflet Data — prepare_leaflet","text":"dbchene data frame containing information oak trees. dbtruffe data frame containing information truffles. dbreens data frame containing information reensemencement.","code":""},{"path":"/reference/prepare_leaflet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Leaflet Data — prepare_leaflet","text":"list suitable passing Leaflet JavaScript visualization.","code":""},{"path":"/reference/prepare_leaflet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Leaflet Data — prepare_leaflet","text":"","code":"dbchene <- data.frame(   idoak = c(1, 2, 3),   chene_nom = c(\"Chene 1\", \"Chene 2\", \"Chene 3\") )  dbreens <- data.frame(   idreens = c(8),   idoak = c(2),   date_reens = c(\"2022-04-30\") )  dbtruffe <- data.frame(   idoak = c(1, 1, 3),   idtruffle = c(1, 2, 3),   estimation = c(1, 0, 1),   weight = c(10, 15, NA) ) prepare_leaflet(dbchene, dbtruffe, dbreens) #> $data_prep #> $data_prep[[1]] #> $data_prep[[1]][[1]] #> [1] \"1\" #>  #> $data_prep[[1]][[2]] #> [1] \"Chene 1\" #>  #> $data_prep[[1]][[3]] #> [1] \"1\" #>  #> $data_prep[[1]][[4]] #> [1] \"NA\" #>  #>  #> $data_prep[[2]] #> $data_prep[[2]][[1]] #> [1] \"2\" #>  #> $data_prep[[2]][[2]] #> [1] \"Chene 2\" #>  #> $data_prep[[2]][[3]] #> [1] \"NA\" #>  #> $data_prep[[2]][[4]] #> [1] \"1\" #>  #>  #> $data_prep[[3]] #> $data_prep[[3]][[1]] #> [1] \"3\" #>  #> $data_prep[[3]][[2]] #> [1] \"Chene 3\" #>  #> $data_prep[[3]][[3]] #> [1] \"1\" #>  #> $data_prep[[3]][[4]] #> [1] \"NA\" #>  #>  #>  #> $names_element #> [1] \"idoak\"        \"chene_nom\"    \"info_missing\" \"info_reens\"   #>"},{"path":"/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"/reference/update_db_truffe.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a row in the ","title":"Update a row in the ","text":"function updates row \"truffe\" table database using SQL UPDATE query.","code":""},{"path":"/reference/update_db_truffe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a row in the ","text":"","code":"update_db_truffe(   conn,   idtruffle,   idoak,   date_found,   weight,   comment,   estimation )"},{"path":"/reference/update_db_truffe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a row in the ","text":"conn connection database. idtruffle identifier truffle update. idoak identifier oak tree associated truffle. date_found date truffle found. weight weight truffle. comment comments associated truffle. estimation estimation truffle.","code":""},{"path":"/reference/update_db_truffe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a row in the ","text":"function return value, updates corresponding row \"truffe\" table database.","code":""},{"path":"/reference/update_db_truffe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a row in the ","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")  # Create a truffle table in the database DBI::dbWriteTable(   conn,   \"truffe\",   data.frame(     idtruffle = \"156\",     idoak = \"15\",     date_found = as.numeric(as.Date(\"2020/02/02\")),     weight = 12,     estimation = 1,     comment = \"Comment\"   ) )  update_db_truffe(   conn,   idtruffle = \"156\",   idoak = \"15\",   date_found = as.numeric(as.Date(\"2020/02/02\")),   weight = 22,   estimation = 0,   comment = \"It's good!\" ) #> UPDATE db truffe"},{"path":"/reference/weight_truffles_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","title":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","text":"function calculates total weight truffles grouped specified columns given data frame.","code":""},{"path":"/reference/weight_truffles_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","text":"","code":"weight_truffles_by(dbtruffe, ...)"},{"path":"/reference/weight_truffles_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","text":"dbtruffe data frame containing information truffles. ... Columns group , passed arguments.","code":""},{"path":"/reference/weight_truffles_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","text":"summarized data frame containing total weight truffles grouped specified columns.","code":""},{"path":"/reference/weight_truffles_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate total weight of truffles grouped by specified columns — weight_truffles_by","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  conn <- DBI::dbConnect(    RSQLite::SQLite(),    system.file(dbname = \"chenes_truffe.sqlite\", package = \"truffles\")  ) truffes <- DBI::dbReadTable(conn, name = \"truffe\")  weight_truffles_by(truffes, annee = lubridate::year(as.Date(date_found))) #> # A tibble: 3 × 2 #>   annee weight #>   <dbl>  <int> #> 1  2022   5583 #> 2  2023   3837 #> 3  2024    493  truffes_chene <- truffes |>   inner_join(DBI::dbReadTable(conn, name = \"chenes\"), by = \"idoak\") #> Warning: Detected an unexpected many-to-many relationship between `x` and `y`. #> ℹ Row 4 of `x` matches multiple rows in `y`. #> ℹ Row 1 of `y` matches multiple rows in `x`. #> ℹ If a many-to-many relationship is expected, set `relationship = #>   \"many-to-many\"` to silence this warning. weight_truffles_by(truffes_chene, annee = lubridate::year(as.Date(date_found)), type) #> # A tibble: 5 × 3 #>   annee type   weight #>   <dbl> <chr>   <int> #> 1  2022 Green     651 #> 2  2022 Normal   6162 #> 3  2023 Green     407 #> 4  2023 Normal   3770 #> 5  2024 Normal    493"},{"path":"/reference/write_db_new_reens.html","id":null,"dir":"Reference","previous_headings":"","what":"Write new reensemencement data to the database — write_db_new_reens","title":"Write new reensemencement data to the database — write_db_new_reens","text":"function writes new reensemencement data specified database table.","code":""},{"path":"/reference/write_db_new_reens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write new reensemencement data to the database — write_db_new_reens","text":"","code":"write_db_new_reens(   conn = connect_db(),   theidoak,   date_reens,   digest_ = Sys.time() )"},{"path":"/reference/write_db_new_reens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write new reensemencement data to the database — write_db_new_reens","text":"conn connection database. theidoak ID oak tree (oak) truffle found. date_reens date reensemencement. digest_ digest reensemencement data.","code":""},{"path":"/reference/write_db_new_reens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write new reensemencement data to the database — write_db_new_reens","text":"","code":"# write_db_new_reens(theidoak = \"chene\")"},{"path":"/reference/write_db_new_truffe.html","id":null,"dir":"Reference","previous_headings":"","what":"Write new truffle data to the database — write_db_new_truffe","title":"Write new truffle data to the database — write_db_new_truffe","text":"function writes new truffle data specified database table.","code":""},{"path":"/reference/write_db_new_truffe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write new truffle data to the database — write_db_new_truffe","text":"","code":"write_db_new_truffe(   conn = connect_db(),   theidoak,   date_found,   weight,   estimation,   comment,   digest_ = Sys.time() )"},{"path":"/reference/write_db_new_truffe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write new truffle data to the database — write_db_new_truffe","text":"conn connection database. theidoak ID oak tree (oak) truffle found. date_found date truffle found. weight weight truffle grams. estimation logical indicating whether weight estimated . comment additional comments related truffle. digest_ digest truffle.","code":""},{"path":"/reference/write_db_new_truffe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write new truffle data to the database — write_db_new_truffe","text":"","code":"# write_db_new_truffe(theidoak = \"chene\")"},{"path":[]},{"path":"/news/index.html","id":"truffles-002","dir":"Changelog","previous_headings":"","what":"truffles 0.0.2","title":"truffles 0.0.2","text":"Using flexbox modals New function get_info_reensemence() get information latest reseeding date Add User Doc / Dev Doc pkgdown","code":""},{"path":"/news/index.html","id":"truffles-001","dir":"Changelog","previous_headings":"","what":"truffles 0.0.1","title":"truffles 0.0.1","text":"New function connect_db() connect database New function get_info() get information oak truffles New function get_info_chene() get information oak tree New function get_info_chene_last_truffe() get Information Last Truffle Found Specific Oak Tree New function get_info_chene_truffe() get information truffles associated oak tree New function update_db_truffe() update row “truffe” table database. New function weight_truffles_by() calculate total weight truffles grouped specified columns New function write_db_new_truffe() write new truffle data database","code":""}]
